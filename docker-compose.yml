services:
  kafka:
    image: wurstmeister/kafka:latest
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    ports:
      - "9092:9092"  # External port for Kafka
      - "9093:9093"  # Internal port for container-to-container communication
    depends_on:
      - zookeeper
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - microservices-network

  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      retries: 5
    networks:
      - microservices-network

  cassandra:
    image: cassandra:latest
    container_name: cassandra
    ports:
      - "9042:9042"
    environment:
      - CASSANDRA_START_RPC=true
    healthcheck:
      test: [ "CMD-SHELL", "cqlsh -e 'DESCRIBE KEYSPACES'" ]
      interval: 20s
      retries: 10
      timeout: 10s
    networks:
      - microservices-network

  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
    networks:
      - microservices-network

  order-service:
    build: ./order-service
    ports:
      - "8081:8080"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
      cassandra:
        condition: service_healthy
    networks:
      - microservices-network

  inventory-service:
    build: ./inventory-service
    ports:
      - "8082:8080"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
      cassandra:
        condition: service_healthy
    networks:
      - microservices-network

  payment-service:
    build: ./payment-service
    ports:
      - "8083:8080"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
      cassandra:
        condition: service_healthy
    networks:
      - microservices-network

  notification-service:
    build: ./notification-service
    ports:
      - "8084:8080"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
      cassandra:
        condition: service_healthy
    networks:
      - microservices-network

volumes:
  kafka-data:
  zookeeper-data:
  postgres_data:

networks:
  microservices-network:
    driver: bridge